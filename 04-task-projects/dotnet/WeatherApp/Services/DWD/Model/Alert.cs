/*
 * Bright Sky
 *
 *  Bright Sky is a free and open-source weather API. It aims to provide an easy-to-use gateway to weather data that the [DWD](https://www.dwd.de/) – Germany's meteorological service – publishes on their [open data server](https://opendata.dwd.de/).  The public instance at `https://api.brightsky.dev/` is free-to-use for all purposes, **no API key required**! Please note that the [DWD's Terms of Use](https://www.dwd.de/EN/service/copyright/copyright_artikel.html) apply to all data you retrieve through the API.  > This documentation is generated from an OpenAPI specification. The current version is available from https://brightsky.dev/brightsky.yml.   ## Quickstart  * Check out [`/current_weather`](operations/getCurrentWeather) if you want to know what the weather's like _right now_. * Check out [`/weather`](operations/getWeather) for hourly weather observations and forecasts. * Check out [`/radar`](operations/getRadar) if you're looking for a high-resolution rain radar. * Check out [`/alerts`](operations/getAlerts) if you're interested in weather alerts.  ... or keep reading below for some background information.   ## Good to Know  * **Geographical coverage**: due to its nature as German meteorological service, the observations published by the DWD have a strong focus on Germany. The _forecasts_ cover the whole world, albeit at a much lower density outside of Germany. * **Historical coverage**: Bright Sky serves historical data going back to January 1st, 2010. If you need data that goes further back, check out our [infrastructure repository](https://github.com/jdemaeyer/brightsky-infrastructure) to easily set up your own instance of Bright Sky! * **Source IDs**: Bright Sky's _source IDs_ are a technical artifact and – unlike the [DWD station IDs](https://www.dwd.de/DE/leistungen/klimadatendeutschland/stationsliste.html) and [WMO station IDs](https://opendata.dwd.de/climate_environment/CDC/help/stations_list_CLIMAT_data.txt) – have no meaning in the real world. When making requests to Bright Sky, try to avoid them and supply lat/lon or station IDs instead.   ## Useful Links  * [Bright Sky source code and issue tracking](https://github.com/jdemaeyer/brightsky/) * [Bright Sky infrastructure configuration](https://github.com/jdemaeyer/brightsky-infrastructure/) * [DWD Open Data landing page](https://www.dwd.de/EN/ourservices/opendata/opendata.html) * [Additional explanation files for DWD Open Data](https://www.dwd.de/DE/leistungen/opendata/hilfe.html?nn=495490&lsbId=627548), including:     * [List of main observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/ha_messnetz.xls?__blob=publicationFile&v=1)     * [List of additional observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/na_messnetz.xlsx?__blob=publicationFile&v=10)     * [List of MOSMIX stations](https://www.dwd.de/DE/leistungen/met_verfahren_mosmix/mosmix_stationskatalog.cfg?view=nasPublication&nn=495490)     * [List of meteorological parameters](https://www.dwd.de/DE/leistungen/opendata/help/schluessel_datenformate/kml/mosmix_elemente_pdf.pdf?__blob=publicationFile&v=2) * [DWD Open Data FAQ (German)](https://www.dwd.de/DE/leistungen/opendata/faqs_opendata.html) * [DWD Copyright information](https://www.dwd.de/EN/service/copyright/copyright_artikel.html)   ## Data Sources  All data available through Bright Sky is taken or derived from data on the [DWD open data server](https://opendata.dwd.de/):  * **Current weather / SYNOP**:   * https://opendata.dwd.de/weather/weather_reports/synoptic/germany/json/ * **Hourly weather**:   * Historical: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/   * Current day: https://opendata.dwd.de/weather/weather_reports/poi/   * Forecasts: https://opendata.dwd.de/weather/local_forecasts/mos/ * **Radar**:   * https://opendata.dwd.de/weather/radar/composite/rv/ * **Alerts**:   * https://opendata.dwd.de/weather/alerts/cap/COMMUNEUNION_DWD_STAT/ 
 *
 * The version of the OpenAPI document: 2.1.9
 * Contact: jakob@brightsky.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Service.DWD.Model
{
    /// <summary>
    /// Alert
    /// </summary>
    [DataContract(Name = "Alert")]
    public partial class Alert : IEquatable<Alert>, IValidatableObject
    {
        /// <summary>
        /// Alert status
        /// </summary>
        /// <value>Alert status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Actual for value: actual
            /// </summary>
            [EnumMember(Value = "actual")]
            Actual = 1,

            /// <summary>
            /// Enum Test for value: test
            /// </summary>
            [EnumMember(Value = "test")]
            Test = 2

        }


        /// <summary>
        /// Alert status
        /// </summary>
        /// <value>Alert status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Alert category, meteorological message (&#x60;met&#x60;) or public health related message (&#x60;health&#x60;)
        /// </summary>
        /// <value>Alert category, meteorological message (&#x60;met&#x60;) or public health related message (&#x60;health&#x60;)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum Met for value: met
            /// </summary>
            [EnumMember(Value = "met")]
            Met = 1,

            /// <summary>
            /// Enum Health for value: health
            /// </summary>
            [EnumMember(Value = "health")]
            Health = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// Alert category, meteorological message (&#x60;met&#x60;) or public health related message (&#x60;health&#x60;)
        /// </summary>
        /// <value>Alert category, meteorological message (&#x60;met&#x60;) or public health related message (&#x60;health&#x60;)</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Code denoting type of action recommended for target audience
        /// </summary>
        /// <value>Code denoting type of action recommended for target audience</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResponseTypeEnum
        {
            /// <summary>
            /// Enum Prepare for value: prepare
            /// </summary>
            [EnumMember(Value = "prepare")]
            Prepare = 1,

            /// <summary>
            /// Enum Allclear for value: allclear
            /// </summary>
            [EnumMember(Value = "allclear")]
            Allclear = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3,

            /// <summary>
            /// Enum Monitor for value: monitor
            /// </summary>
            [EnumMember(Value = "monitor")]
            Monitor = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5

        }


        /// <summary>
        /// Code denoting type of action recommended for target audience
        /// </summary>
        /// <value>Code denoting type of action recommended for target audience</value>
        [DataMember(Name = "response_type", EmitDefaultValue = true)]
        public ResponseTypeEnum? ResponseType { get; set; }
        /// <summary>
        /// Alert time frame
        /// </summary>
        /// <value>Alert time frame</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UrgencyEnum
        {
            /// <summary>
            /// Enum Immediate for value: immediate
            /// </summary>
            [EnumMember(Value = "immediate")]
            Immediate = 1,

            /// <summary>
            /// Enum Future for value: future
            /// </summary>
            [EnumMember(Value = "future")]
            Future = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// Alert time frame
        /// </summary>
        /// <value>Alert time frame</value>
        [DataMember(Name = "urgency", EmitDefaultValue = true)]
        public UrgencyEnum? Urgency { get; set; }
        /// <summary>
        /// Alert severity
        /// </summary>
        /// <value>Alert severity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Minor for value: minor
            /// </summary>
            [EnumMember(Value = "minor")]
            Minor = 1,

            /// <summary>
            /// Enum Moderate for value: moderate
            /// </summary>
            [EnumMember(Value = "moderate")]
            Moderate = 2,

            /// <summary>
            /// Enum Severe for value: severe
            /// </summary>
            [EnumMember(Value = "severe")]
            Severe = 3,

            /// <summary>
            /// Enum Extreme for value: extreme
            /// </summary>
            [EnumMember(Value = "extreme")]
            Extreme = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5

        }


        /// <summary>
        /// Alert severity
        /// </summary>
        /// <value>Alert severity</value>
        [DataMember(Name = "severity", EmitDefaultValue = true)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Alert certainty
        /// </summary>
        /// <value>Alert certainty</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CertaintyEnum
        {
            /// <summary>
            /// Enum Observed for value: observed
            /// </summary>
            [EnumMember(Value = "observed")]
            Observed = 1,

            /// <summary>
            /// Enum Likely for value: likely
            /// </summary>
            [EnumMember(Value = "likely")]
            Likely = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// Alert certainty
        /// </summary>
        /// <value>Alert certainty</value>
        [DataMember(Name = "certainty", EmitDefaultValue = true)]
        public CertaintyEnum? Certainty { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert" /> class.
        /// </summary>
        /// <param name="id">Bright Sky-internal ID for this alert.</param>
        /// <param name="alertId">Unique CAP message identifier.</param>
        /// <param name="status">Alert status.</param>
        /// <param name="effective">Alert issue time.</param>
        /// <param name="onset">Expected event begin time.</param>
        /// <param name="expires">Expected event end time.</param>
        /// <param name="category">Alert category, meteorological message (&#x60;met&#x60;) or public health related message (&#x60;health&#x60;).</param>
        /// <param name="responseType">Code denoting type of action recommended for target audience.</param>
        /// <param name="urgency">Alert time frame.</param>
        /// <param name="severity">Alert severity.</param>
        /// <param name="certainty">Alert certainty.</param>
        /// <param name="eventCode">DWD event code.</param>
        /// <param name="eventEn">Label for DWD event code (English).</param>
        /// <param name="eventDe">Label for DWD event code (German).</param>
        /// <param name="headlineEn">Alert headline (English).</param>
        /// <param name="headlineDe">Alert headline (German).</param>
        /// <param name="descriptionEn">Alert description (English).</param>
        /// <param name="descriptionDe">Alert headline (German).</param>
        /// <param name="instructionEn">Additional instructions and safety advice (English).</param>
        /// <param name="instructionDe">Additional instructions and safety advice (German).</param>
        public Alert(int id = default(int), string alertId = default(string), StatusEnum? status = default(StatusEnum?), DateTime effective = default(DateTime), DateTime onset = default(DateTime), DateTime? expires = default(DateTime?), CategoryEnum? category = default(CategoryEnum?), ResponseTypeEnum? responseType = default(ResponseTypeEnum?), UrgencyEnum? urgency = default(UrgencyEnum?), SeverityEnum? severity = default(SeverityEnum?), CertaintyEnum? certainty = default(CertaintyEnum?), int? eventCode = default(int?), string eventEn = default(string), string eventDe = default(string), string headlineEn = default(string), string headlineDe = default(string), string descriptionEn = default(string), string descriptionDe = default(string), string instructionEn = default(string), string instructionDe = default(string))
        {
            Id = id;
            AlertId = alertId;
            Status = status;
            Effective = effective;
            Onset = onset;
            Expires = expires;
            Category = category;
            ResponseType = responseType;
            Urgency = urgency;
            Severity = severity;
            Certainty = certainty;
            EventCode = eventCode;
            EventEn = eventEn;
            EventDe = eventDe;
            HeadlineEn = headlineEn;
            HeadlineDe = headlineDe;
            DescriptionEn = descriptionEn;
            DescriptionDe = descriptionDe;
            InstructionEn = instructionEn;
            InstructionDe = instructionDe;
        }

        /// <summary>
        /// Bright Sky-internal ID for this alert
        /// </summary>
        /// <value>Bright Sky-internal ID for this alert</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique CAP message identifier
        /// </summary>
        /// <value>Unique CAP message identifier</value>
        [DataMember(Name = "alert_id", EmitDefaultValue = false)]
        public string AlertId { get; set; }

        /// <summary>
        /// Alert issue time
        /// </summary>
        /// <value>Alert issue time</value>
        [DataMember(Name = "effective", EmitDefaultValue = false)]
        public DateTime Effective { get; set; }

        /// <summary>
        /// Expected event begin time
        /// </summary>
        /// <value>Expected event begin time</value>
        [DataMember(Name = "onset", EmitDefaultValue = false)]
        public DateTime Onset { get; set; }

        /// <summary>
        /// Expected event end time
        /// </summary>
        /// <value>Expected event end time</value>
        [DataMember(Name = "expires", EmitDefaultValue = true)]
        public DateTime? Expires { get; set; }

        /// <summary>
        /// DWD event code
        /// </summary>
        /// <value>DWD event code</value>
        [DataMember(Name = "event_code", EmitDefaultValue = true)]
        public int? EventCode { get; set; }

        /// <summary>
        /// Label for DWD event code (English)
        /// </summary>
        /// <value>Label for DWD event code (English)</value>
        [DataMember(Name = "event_en", EmitDefaultValue = true)]
        public string EventEn { get; set; }

        /// <summary>
        /// Label for DWD event code (German)
        /// </summary>
        /// <value>Label for DWD event code (German)</value>
        [DataMember(Name = "event_de", EmitDefaultValue = true)]
        public string EventDe { get; set; }

        /// <summary>
        /// Alert headline (English)
        /// </summary>
        /// <value>Alert headline (English)</value>
        [DataMember(Name = "headline_en", EmitDefaultValue = false)]
        public string HeadlineEn { get; set; }

        /// <summary>
        /// Alert headline (German)
        /// </summary>
        /// <value>Alert headline (German)</value>
        [DataMember(Name = "headline_de", EmitDefaultValue = false)]
        public string HeadlineDe { get; set; }

        /// <summary>
        /// Alert description (English)
        /// </summary>
        /// <value>Alert description (English)</value>
        [DataMember(Name = "description_en", EmitDefaultValue = false)]
        public string DescriptionEn { get; set; }

        /// <summary>
        /// Alert headline (German)
        /// </summary>
        /// <value>Alert headline (German)</value>
        [DataMember(Name = "description_de", EmitDefaultValue = false)]
        public string DescriptionDe { get; set; }

        /// <summary>
        /// Additional instructions and safety advice (English)
        /// </summary>
        /// <value>Additional instructions and safety advice (English)</value>
        [DataMember(Name = "instruction_en", EmitDefaultValue = true)]
        public string InstructionEn { get; set; }

        /// <summary>
        /// Additional instructions and safety advice (German)
        /// </summary>
        /// <value>Additional instructions and safety advice (German)</value>
        [DataMember(Name = "instruction_de", EmitDefaultValue = true)]
        public string InstructionDe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Alert {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AlertId: ").Append(AlertId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Effective: ").Append(Effective).Append("\n");
            sb.Append("  Onset: ").Append(Onset).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ResponseType: ").Append(ResponseType).Append("\n");
            sb.Append("  Urgency: ").Append(Urgency).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Certainty: ").Append(Certainty).Append("\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  EventEn: ").Append(EventEn).Append("\n");
            sb.Append("  EventDe: ").Append(EventDe).Append("\n");
            sb.Append("  HeadlineEn: ").Append(HeadlineEn).Append("\n");
            sb.Append("  HeadlineDe: ").Append(HeadlineDe).Append("\n");
            sb.Append("  DescriptionEn: ").Append(DescriptionEn).Append("\n");
            sb.Append("  DescriptionDe: ").Append(DescriptionDe).Append("\n");
            sb.Append("  InstructionEn: ").Append(InstructionEn).Append("\n");
            sb.Append("  InstructionDe: ").Append(InstructionDe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Alert);
        }

        /// <summary>
        /// Returns true if Alert instances are equal
        /// </summary>
        /// <param name="input">Instance of Alert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Alert? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) && 
                (
                    AlertId == input.AlertId ||
                    (AlertId != null &&
                    AlertId.Equals(input.AlertId))
                ) && 
                (
                    Status == input.Status ||
                    Status.Equals(input.Status)
                ) && 
                (
                    Effective == input.Effective ||
                    (Effective != null &&
                    Effective.Equals(input.Effective))
                ) && 
                (
                    Onset == input.Onset ||
                    (Onset != null &&
                    Onset.Equals(input.Onset))
                ) && 
                (
                    Expires == input.Expires ||
                    (Expires != null &&
                    Expires.Equals(input.Expires))
                ) && 
                (
                    Category == input.Category ||
                    Category.Equals(input.Category)
                ) && 
                (
                    ResponseType == input.ResponseType ||
                    ResponseType.Equals(input.ResponseType)
                ) && 
                (
                    Urgency == input.Urgency ||
                    Urgency.Equals(input.Urgency)
                ) && 
                (
                    Severity == input.Severity ||
                    Severity.Equals(input.Severity)
                ) && 
                (
                    Certainty == input.Certainty ||
                    Certainty.Equals(input.Certainty)
                ) && 
                (
                    EventCode == input.EventCode ||
                    (EventCode != null &&
                    EventCode.Equals(input.EventCode))
                ) && 
                (
                    EventEn == input.EventEn ||
                    (EventEn != null &&
                    EventEn.Equals(input.EventEn))
                ) && 
                (
                    EventDe == input.EventDe ||
                    (EventDe != null &&
                    EventDe.Equals(input.EventDe))
                ) && 
                (
                    HeadlineEn == input.HeadlineEn ||
                    (HeadlineEn != null &&
                    HeadlineEn.Equals(input.HeadlineEn))
                ) && 
                (
                    HeadlineDe == input.HeadlineDe ||
                    (HeadlineDe != null &&
                    HeadlineDe.Equals(input.HeadlineDe))
                ) && 
                (
                    DescriptionEn == input.DescriptionEn ||
                    (DescriptionEn != null &&
                    DescriptionEn.Equals(input.DescriptionEn))
                ) && 
                (
                    DescriptionDe == input.DescriptionDe ||
                    (DescriptionDe != null &&
                    DescriptionDe.Equals(input.DescriptionDe))
                ) && 
                (
                    InstructionEn == input.InstructionEn ||
                    (InstructionEn != null &&
                    InstructionEn.Equals(input.InstructionEn))
                ) && 
                (
                    InstructionDe == input.InstructionDe ||
                    (InstructionDe != null &&
                    InstructionDe.Equals(input.InstructionDe))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Id.GetHashCode();
                if (AlertId != null)
                {
                    hashCode = (hashCode * 59) + AlertId.GetHashCode();
                }
                hashCode = (hashCode * 59) + Status.GetHashCode();
                if (Effective != null)
                {
                    hashCode = (hashCode * 59) + Effective.GetHashCode();
                }
                if (Onset != null)
                {
                    hashCode = (hashCode * 59) + Onset.GetHashCode();
                }
                if (Expires != null)
                {
                    hashCode = (hashCode * 59) + Expires.GetHashCode();
                }
                hashCode = (hashCode * 59) + Category.GetHashCode();
                hashCode = (hashCode * 59) + ResponseType.GetHashCode();
                hashCode = (hashCode * 59) + Urgency.GetHashCode();
                hashCode = (hashCode * 59) + Severity.GetHashCode();
                hashCode = (hashCode * 59) + Certainty.GetHashCode();
                if (EventCode != null)
                {
                    hashCode = (hashCode * 59) + EventCode.GetHashCode();
                }
                if (EventEn != null)
                {
                    hashCode = (hashCode * 59) + EventEn.GetHashCode();
                }
                if (EventDe != null)
                {
                    hashCode = (hashCode * 59) + EventDe.GetHashCode();
                }
                if (HeadlineEn != null)
                {
                    hashCode = (hashCode * 59) + HeadlineEn.GetHashCode();
                }
                if (HeadlineDe != null)
                {
                    hashCode = (hashCode * 59) + HeadlineDe.GetHashCode();
                }
                if (DescriptionEn != null)
                {
                    hashCode = (hashCode * 59) + DescriptionEn.GetHashCode();
                }
                if (DescriptionDe != null)
                {
                    hashCode = (hashCode * 59) + DescriptionDe.GetHashCode();
                }
                if (InstructionEn != null)
                {
                    hashCode = (hashCode * 59) + InstructionEn.GetHashCode();
                }
                if (InstructionDe != null)
                {
                    hashCode = (hashCode * 59) + InstructionDe.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
