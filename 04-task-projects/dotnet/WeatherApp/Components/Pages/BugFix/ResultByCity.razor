@page "/WeatherBug"
@using global::Weather.NET.Models
@using Weather.NET
@using Weather.NET.Enums
@using Weather.NET.Models.WeatherModel
@inject IConfiguration Configuration

<h3>🥉 Search Weather by City-Name 🥉</h3>
<RadzenCard class="my-4" Variant="Variant.Outlined">
    <RadzenRow>
        
        @* // TODO 🥉 - Add binding and click Handler for searching *@
        <RadzenTextBox Placeholder="Enter city name" />
        <RadzenButton Text="Search" />

    </RadzenRow>

    @if (weatherByName != null)
    {
        <RadzenRow>
            <RadzenCard>
                <RadzenCardContent>
                    <RadzenImage Src="@weatherByName?.Weather.FirstOrDefault().IconUrl" Alt="Weather Icon" />
                    <p>@weatherByName.CityName</p>
                    <p>@weatherByName.Main.Temperature.ToString() °C</p>
                    <p>@weatherByName.Weather.FirstOrDefault()?.Description</p>
                </RadzenCardContent>
            </RadzenCard>
        </RadzenRow>
    }

    @if (_hasError)
    {
        <RadzenRow>
            <RadzenCard>
                <RadzenCardContent>
                    <h4>Error: @errorMessage</h4>
                </RadzenCardContent>
            </RadzenCard>
        </RadzenRow>
    }

</RadzenCard>

@code {

    private WeatherClient _client;
    private Measurement _measurement = Measurement.Metric;
    private WeatherModel? weatherByName;
    private string _cityName = string.Empty;

    private bool _hasError;
    private string errorMessage = string.Empty;

    // TODO 🥉 - Load Key for Client. Add Error-Handling
    protected override void OnInitialized()
    {
        _client = new WeatherClient("");
    }

    private string? LoadApiKey()
    {
        var apiKey = Configuration.GetSection("OpenWeatherAPI");
        return apiKey.Value;
    }

    // TODO 🥉 - Search Weather by CityName add error handling
    // TODO 🥉 - Api shoud not triggered if cityName has no input and reuse the response
    // TODO 🥉 - Check Measurement for the correct output
    private async Task SearchWeatherByCityName()
    {
        weatherByName = await _client.GetCurrentWeatherAsync("");
    }
}