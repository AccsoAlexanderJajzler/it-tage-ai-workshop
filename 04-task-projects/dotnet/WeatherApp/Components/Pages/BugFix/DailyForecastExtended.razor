@page "/WeatherBug"
@using System.Text.Json
@using System.Net
@using global::Weather.NET.Models
@using Weather.NET
@using Weather.NET.Enums
@using Weather.NET.Models.WeatherModel
@using global::WeatherApp.Services
@using WeatherApp.Model.OpenWeather
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory


<h3>ðŸ¥ˆ Daily Forecast ðŸ¥ˆ</h3>


<RadzenCard Variant="Variant.Outlined">
    <RadzenCardContent>

        @* TODO: ðŸ¥‰ - Add search text, button and dropdown for days to search weather by city with radzen components *@
 
    </RadzenCardContent>
</RadzenCard>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">

    @if (forecastData != null)
    {
        @foreach (var forecast in forecastData.list.Select((value,i) => new {i, value}))
        {
            <RadzenPanel AllowCollapse="true" Class="rz-my-10 rz-mx-auto">
                <HeaderTemplate>
                    <RadzenText TextStyle=" TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
                        <RadzenIcon Icon="account_box" class="rz-mr-1"/><b>Day @forecast.i</b>
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>


                    <RadzenCard>
                        <RadzenCardContent>
                            <p>Temperature (Day): @forecast.value.temp.day.ToString() Â°C</p>
                            <p>Temperature (Min): @forecast.value.temp.min.ToString() Â°C</p>
                            <p>Temperature (Max): @forecast.value.temp.max.ToString() Â°C</p>

                            @foreach (var w in forecast.value.weather)
                            {
                                <RadzenImage Src="@GetIconUrl(w.icon)" Alt="@w.description"/>
                                <p>@w.description</p>
                            }
                        </RadzenCardContent>
                    </RadzenCard>
                </ChildContent>
            </RadzenPanel>
        }
    }
</RadzenStack>

@code {
    private SimpleOpenWeatherApiService _client;

    private List<int> days = Enumerable.Range(1, 16).ToList();
    private int maxDays = 1;
    
    private List<GeoLocation>? _geoLocation;
    private ForeCastWeather? forecastData;
    
    private string cityName = string.Empty;
    
    private bool hasError;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        _client = new SimpleOpenWeatherApiService(HttpClientFactory, Configuration);
    }

    //TODO: ðŸ¥ˆ - Find geolocation by city name and get forecast weather
    private async Task SearchWeatherContent()
    {
    }


    //TODO: ðŸ¥‰ - Add method to get the icon url
    private string? GetIconUrl(string icon)
    {
        return string.Empty;
    }
}