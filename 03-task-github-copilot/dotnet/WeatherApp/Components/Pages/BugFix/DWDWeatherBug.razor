@page "/WeatherBug"
@using global::Weather.NET
@using global::Weather.NET.Models.WeatherModel
@inject IConfiguration Configuration


<h3>DWD Weather API</h3>

<RadzenRow class="" Gap="1rem">
    <RadzenColumn Size="6" class="">
        <RadzenFormField Text="Search Weather for City" Style="width: 100%;">
            <RadzenTextBox Style="width: 100%;"/>
        </RadzenFormField>
    </RadzenColumn>
    <RadzenColumn Size="2" class="">
        <RadzenButton Text="Search Images">Search</RadzenButton>
    </RadzenColumn>
</RadzenRow>

@* // TODO ðŸ¥‡ - Display Location, Name, Temp. and the current Weather as image *@
@if(weatherByName is not null)
{
    <div>
        <h4>Weather for {cityName}</h4>
        <p>Temperature: {weatherByName.Main.Temp}Â°C</p>
        <p>Humidity: {weatherByName.Main.Humidity}%</p>
        <p>Wind Speed: {weatherByName.Wind.Speed} m/s</p>
    </div>
}



@code {
    private string cityName;
    WeatherModel? weatherByName;

    Service.DWD.Client.ApiClient client;

    protected override void OnInitialized()
    {
        string apiKey = LoadApiConfifg();
        var client = new WeatherClient(apiKey);
    }

    private string LoadApiConfifg(){
        var apiKey = Configuration.GetSection("OpenWeatherAPI");
        return apiKey.Value;
    }

    private async Task GetCurrentWeather()
    {
        if (string.IsNullOrEmpty(cityName))
        {
            return;
        }

        try
        {
            var weatherByName = await client.GetCurrentWeather();

            if (weatherByName is null)
            {
                // Handle the case when weather data is not available for the specified city
                Console.WriteLine($"No weather data found for {cityName}");
            }
            else
            {
                // Display the weather data
                Console.WriteLine($"Weather for {cityName} ");
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred while searching weather for {cityName}: {ex.Message}");
        }
    }

    private async Task GetWeather()
    {
        if (string.IsNullOrEmpty(cityName))
        {
            return;
        }

        try
        {
            var allWeatherContent = await client.GetWeather(DateTime.Now);

            if (weatherByName is null)
            {
                // Handle the case when weather data is not available for the specified city
                Console.WriteLine($"No weather data found for {cityName}");
            }
            else
            {
                // Display the weather data
                Console.WriteLine($"Weather for {cityName} ");
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred while searching weather for {cityName}: {ex.Message}");
        }
    }

    private async Task GetWeatherAlerts()
    {
        if (string.IsNullOrEmpty(cityName))
        {
            return;
        }

        try
        {
            var weatherAlerts = await client.GetAlerts();

            if (weatherByName is null)
            {
                // Handle the case when weather data is not available for the specified city
                Console.WriteLine($"No weather data found for {cityName}");
            }
            else
            {
                // Display the weather data
                Console.WriteLine($"Weather for {cityName} ");
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred while searching weather for {cityName}: {ex.Message}");
        }
    }

}