using Service.DWD.Model;


namespace Service.DWD.Client;
public interface IApiClient
{
    /// <summary>
    /// Alerts
    /// </summary>
    /// <remarks>
    /// Returns a list of weather alerts for the given location, or all weather alerts if no location given.  If you supply either &#x60;warn_cell_id&#x60; or both &#x60;lat&#x60; and &#x60;lon&#x60;, Bright Sky will return additional information on that cell in the &#x60;location&#x60; field. Warn cell IDs are municipality (_Gemeinde_) cell IDs.  ### Notes  * The DWD divides Germany&#39;s area into roughly 11,000 \&quot;cells\&quot; based on municipalities (_Gemeinden_), and issues warnings for each of these cells. Most warnings apply to many cells. * Bright Sky will supply information on the cell that a given lat/lon belongs to in the &#x60;location&#x60; field. * There is also a set of roughly 400 cells based on districts (_Landkreise_) that is not supported by Bright Sky. * The complete list of cells can be found on the DWD GeoServer (see below).  ### Additional resources  * [Live demo of a simple interactive alerts map](https://brightsky.dev/demo/alerts/) * [Source for alerts map demo](https://github.com/jdemaeyer/brightsky/blob/master/docs/demo/alerts/index.html) * [Map view of all current alerts by the DWD](https://www.dwd.de/DE/wetter/warnungen_gemeinden/warnWetter_node.html) * [List of municipality cells](https://maps.dwd.de/geoserver/wfs?SERVICE&#x3D;WFS&amp;VERSION&#x3D;2.0.0&amp;REQUEST&#x3D;GetFeature&amp;TYPENAMES&#x3D;Warngebiete_Gemeinden&amp;OUTPUTFORMAT&#x3D;json) * [List of district cells (*not used by Bright Sky!*)](https://maps.dwd.de/geoserver/wfs?SERVICE&#x3D;WFS&amp;VERSION&#x3D;2.0.0&amp;REQUEST&#x3D;GetFeature&amp;TYPENAMES&#x3D;Warngebiete_Kreise&amp;OUTPUTFORMAT&#x3D;json) * [Raw data on the Open Data Server](https://opendata.dwd.de/weather/alerts/cap/COMMUNEUNION_DWD_STAT/) * [DWD Documentation on alert fields and their allowed contents (English)](https://www.dwd.de/DE/leistungen/opendata/help/warnungen/cap_dwd_profile_en_pdf_2_1_13.pdf?__blob&#x3D;publicationFile&amp;v&#x3D;3) * [DWD Documentation on alert fields and their allowed contents (German)](https://www.dwd.de/DE/leistungen/opendata/help/warnungen/cap_dwd_profile_de_pdf_2_1_13.pdf?__blob&#x3D;publicationFile&amp;v&#x3D;3) 
    /// </remarks>
    /// <param name="lat">Latitude in decimal degrees. (optional)</param>
    /// <param name="lon">Longitude in decimal degrees. (optional)</param>
    /// <param name="warnCellId">Municipality warn cell ID. (optional)</param>
    /// <param name="tz">Timezone in which timestamps will be presented, as &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;tz database name&lt;/a&gt;. (optional, default to &quot;Etc/UTC&quot;)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>Task of GetAlerts200Response</returns>
    Task<GenericResult> GetAlerts(decimal? lat = default(decimal?), decimal? lon = default(decimal?), int? warnCellId = default(int?), string tz = default(string));

    /// <summary>
    /// Retrieves the current weather data for the specified location.
    /// </summary>
    /// <param name="lat">Latitude in decimal degrees. (optional)</param>
    /// <param name="lon">Longitude in decimal degrees. (optional)</param>
    /// <param name="dwdStationId">List of DWD station IDs. (optional)</param>
    /// <param name="wmoStationId">List of WMO station IDs. (optional)</param>
    /// <param name="sourceId">List of source IDs. (optional)</param>
    /// <param name="maxDist">Maximum distance in kilometers from the specified location. (optional)</param>
    /// <param name="tz">Timezone in which timestamps will be presented, as tz database name. (optional, default to "Etc/UTC")</param>
    /// <param name="units">Units in which the weather data will be presented. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>Task of GetCurrentWeather200Response</returns>

    //add missing summery for this method
    Task<GenericResult> GetCurrentWeather(decimal? lat = default(decimal?), decimal? lon = default(decimal?), List<string> dwdStationId = default(List<string>), List<string> wmoStationId = default(List<string>), List<int> sourceId = default(List<int>), int? maxDist = default(int?), string tz = default(string), string units = default(string));


    /// <summary>
    /// Radar
    /// </summary>
    /// <remarks>
    /// Returns radar rainfall data with 1 km spatial and 5 minute temporal resolution, including a forecast for the next two hours.  Radar data is recorded on a 1200 km (North-South) x 1100 km (East-West) grid, with each pixel representing 1 km². **That&#39;s quite a lot of data, so use &#x60;lat&#x60;/&#x60;lon&#x60; or &#x60;bbox&#x60; whenever you can (see below).** Past radar records are kept for six hours.  Bright Sky can return the data in a few formats. Use the default &#x60;compressed&#x60; format if possible – this&#39;ll get you the fastest response times by far and reduce load on the server. If you have a small-ish bounding box (e.g. 250 x 250 pixels), using the &#x60;plain&#x60; format should be fine.  ### Quickstart  This request will get you radar data near Münster, reaching 200 km to the East/West/North/South, as a two-dimensional grid of integers:  [&#x60;https://api.brightsky.dev/radar?lat&#x3D;52&amp;lon&#x3D;7.6&amp;format&#x3D;plain&#x60;](https://api.brightsky.dev/radar?lat&#x3D;52&amp;lon&#x3D;7.6&amp;format&#x3D;plain)  ### Content  * The grid is a polar stereographic projection of Germany and the regions bordering it. This is different from the mercator projection used for most consumer-facing maps like OpenStreetMap or Google Maps, and overlaying the radar data onto such a map without conversion (reprojection) will be inaccurate! Check out our [radar demo](https://brightsky.dev/demo/radar/) for an example of correctly reprojecting the radar data using OpenLayers. Alternatively, take a look at the &#x60;dwd:RV-Produkt&#x60; layer on the [DWD&#39;s open GeoServer](https://maps.dwd.de/geoserver/web/wicket/bookmarkable/org.geoserver.web.demo.MapPreviewPage) for ready-made tiles you can overlay onto a map. * The [proj-string](https://proj.org/en/9.2/usage/quickstart.html) for the grid projection is &#x60;+proj&#x3D;stere +lat_0&#x3D;90 +lat_ts&#x3D;60 +lon_0&#x3D;10 +a&#x3D;6378137 +b&#x3D;6356752.3142451802 +no_defs +x_0&#x3D;543196.83521776402 +y_0&#x3D;3622588.8619310018&#x60;. The radar pixels range from &#x60;-500&#x60; (left) to &#x60;1099500&#x60; (right) on the x-axis, and from &#x60;500&#x60; (top) to &#x60;-1199500&#x60; (bottom) on the y-axis, each radar pixel a size of &#x60;1000x1000&#x60; (1 km²). * The DWD data does not cover the whole grid! Many areas near the edges will always be &#x60;0&#x60;. * Values represent 0.01 mm / 5 min. I.e., if a pixel has a value of &#x60;45&#x60;, then 0.45 mm of precipitation fell in the corresponding square kilometer in the past five minutes. * The four corners of the grid are as follows:   * Northwest: Latitude &#x60;55.86208711&#x60;, Longitude &#x60;1.463301510&#x60;   * Northeast: Latitude &#x60;55.84543856&#x60;, Longitude &#x60;18.73161645&#x60;   * Southeast: Latitude &#x60;45.68460578&#x60;, Longitude &#x60;16.58086935&#x60;   * Southwest: Latitude &#x60;45.69642538&#x60;, Longitude &#x60;3.566994635&#x60;  You can find details and more information in the [DWD&#39;s &#x60;RV product info&#x60; (German only)](https://www.dwd.de/DE/leistungen/radarprodukte/formatbeschreibung_rv.pdf?__blob&#x3D;publicationFile&amp;v&#x3D;3). Below is an example visualization of the rainfall radar data taken from this document, using the correct projection and showing the radar coverage:  ![image](https://github.com/jdemaeyer/brightsky/assets/10531844/09f9bb5f-088a-417e-8a0c-ea5a20fe0969)  ### Code examples  &gt; The radar data is quite big (naively unpacking the default 25-frames response into Python integer arrays will eat roughly 125 MB of memory), so use &#x60;bbox&#x60; whenever you can.  #### &#x60;compressed&#x60; format  With Javascript using [&#x60;pako&#x60;](https://github.com/nodeca/pako):  &#x60;&#x60;&#x60;js fetch(   &#39;https://api.brightsky.dev/radar&#39; ).then((resp) &#x3D;&gt; resp.json() ).then((respData) &#x3D;&gt; {   const raw &#x3D; respData.radar[0].precipitation_5;   const compressed &#x3D; Uint8Array.from(atob(raw), c &#x3D;&gt; c.charCodeAt(0));   const rawBytes &#x3D; pako.inflate(compressed).buffer;   const precipitation &#x3D; new Uint16Array(rawBytes); }); &#x60;&#x60;&#x60;  With Python using &#x60;numpy&#x60;:  &#x60;&#x60;&#x60;python import base64 import zlib  import numpy as np import requests  resp &#x3D; requests.get(&#39;https://api.brightsky.dev/radar&#39;) raw &#x3D; resp.json()[&#39;radar&#39;][0][&#39;precipitation_5&#39;] raw_bytes &#x3D; zlib.decompress(base64.b64decode(raw))  data &#x3D; np.frombuffer(     raw_bytes,     dtype&#x3D;&#39;i2&#39;, ).reshape(     # Adjust &#x60;1200&#x60; and &#x60;1100&#x60; to the height/width of your bbox     (1200, 1100), ) &#x60;&#x60;&#x60;  With Python using the standard library&#39;s &#x60;array&#x60;: &#x60;&#x60;&#x60;python import array  # [... load raw_bytes as above ...]  data &#x3D; array.array(&#39;H&#39;) data.frombytes(raw_bytes) data &#x3D; [     # Adjust &#x60;1200&#x60; and &#x60;1100&#x60; to the height/width of your bbox     data[row*1100:(row+1)*1100]     for row in range(1200) ] &#x60;&#x60;&#x60;  Simple plot using &#x60;matplotlib&#x60;: &#x60;&#x60;&#x60;python import matplotlib.pyplot as plt  # [... load data as above ...]  plt.imshow(data, vmax&#x3D;50) plt.show() &#x60;&#x60;&#x60;  #### &#x60;bytes&#x60; format  Same as for &#x60;compressed&#x60;, but add &#x60;?format&#x3D;bytes&#x60; to the URL and remove the call to &#x60;zlib.decompress&#x60;, using just &#x60;raw_bytes &#x3D; base64.b64decode(raw)&#x60; instead.  #### &#x60;plain&#x60; format  This is obviously a lot simpler than the &#x60;compressed&#x60; format. It is, however, also a lot slower. Nonetheless, if you have a small-ish &#x60;bbox&#x60; the performance difference becomes manageable, so just using the &#x60;plain&#x60; format and not having to deal with unpacking logic can be a good option in this case.  With Python: &#x60;&#x60;&#x60;python import requests  resp &#x3D; requests.get(&#39;https://api.brightsky.dev/radar?format&#x3D;plain&#39;) data &#x3D; resp.json()[&#39;radar&#39;][0][&#39;precipitation_5&#39;] &#x60;&#x60;&#x60;  ### Additional resources  * [Source for our radar demo, including reprojecton via OpenLayers](https://github.com/jdemaeyer/brightsky/blob/master/docs/demo/radar/index.html) * [Raw data on the Open Data Server](https://opendata.dwd.de/weather/radar/composite/rv/) * [Details on the &#x60;RV&#x60; product (German)](https://www.dwd.de/DE/leistungen/radarprodukte/formatbeschreibung_rv.pdf?__blob&#x3D;publicationFile&amp;v&#x3D;3) * [Visualization of current rainfall radar](https://www.dwd.de/DE/leistungen/radarbild_film/radarbild_film.html) * [General info on DWD radar products (German)](https://www.dwd.de/DE/leistungen/radarprodukte/radarprodukte.html) * [Radar status (German)](https://www.dwd.de/DE/leistungen/radarniederschlag/rn_info/home_freie_radarstatus_kartendaten.html?nn&#x3D;16102) * [DWD notifications for radar products (German)](https://www.dwd.de/DE/leistungen/radolan/radolan_info/radolan_informationen.html?nn&#x3D;16102) 
    /// </remarks>
    /// <param name="date">Timestamp of first record to retrieve, in ISO 8601 format. May contain time and/or UTC offset. (_Defaults to 1 hour before latest measurement._) (optional)</param>
    /// <param name="lastDate">Timestamp of last record to retrieve, in ISO 8601 format.  May contain time and/or UTC offset. (_Defaults to 2 hours after &#x60;date&#x60;._) (optional)</param>
    /// <param name="bbox">Bounding box (top, left, bottom, right) **in pixels**, edges are inclusive. (_Defaults to full 1200x1100 grid._) (optional)</param>
    /// <param name="lat">Alternative way to set a bounding box, where &#x60;lat&#x60; / &#x60;lon&#x60; will lay inside (but not necessarily in the center of) the returned radar data. Data will reach &#x60;distance&#x60; meters to each side of this location, but is possibly cut off at the edges of the radar grid. (optional)</param>
    /// <param name="lon">Alternative way to set a bounding box, must be used together with &#x60;lat&#x60; and &#x60;distance&#x60;, see description for &#x60;lat&#x60;. (optional)</param>
    /// <param name="distance">Alternative way to set a bounding box, must be used together with &#x60;lat&#x60; and &#x60;lon&#x60;, see description for &#x60;lat&#x60;. (optional)</param>
    /// <param name="tz">Timezone in which timestamps will be presented, as &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;tz database name&lt;/a&gt;. (optional, default to &quot;Etc/UTC&quot;)</param>
    /// <param name="format">Determines how the precipitation data is encoded into the &#x60;precipitation_5&#x60; field: * &#x60;compressed&#x60;: base64-encoded, zlib-compressed bytestring of 2-byte integers * &#x60;bytes&#x60;: base64-encoded bytestring of 2-byte integers * &#x60;plain&#x60;: Nested array of integers  (optional, default to compressed)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetRadar200Response</returns>
    Task<GenericResult> GetRadar(DateTime? date = default(DateTime?), DateTime? lastDate = default(DateTime?), List<int> bbox = default(List<int>), decimal? lat = default(decimal?), decimal? lon = default(decimal?), int? distance = default(int?), string tz = default(string), string format = default(string));
    

    /// <summary>
    /// Hourly weather (including forecasts)
    /// </summary>
    /// <remarks>
    /// Returns a list of hourly weather records (and/or forecasts) for the time range given by &#x60;date&#x60; and &#x60;last_date&#x60;.  To set the location for which to retrieve records (and/or forecasts), you must supply both &#x60;lat&#x60; and &#x60;lon&#x60; _or_ one of &#x60;dwd_station_id&#x60;, &#x60;wmo_station_id&#x60;, or &#x60;source_id&#x60;. 
    /// </remarks>
    /// <param name="date">Timestamp of first weather record (or forecast) to retrieve, in ISO 8601 format. May contain time and/or UTC offset.</param>
    /// <param name="lastDate">Timestamp of last weather record (or forecast) to retrieve, in ISO 8601 format. Will default to &#x60;date + 1 day&#x60;. (optional)</param>
    /// <param name="lat">Latitude in decimal degrees. (optional)</param>
    /// <param name="lon">Longitude in decimal degrees. (optional)</param>
    /// <param name="dwdStationId">DWD station ID, typically five alphanumeric characters. You can supply multiple station IDs separated by commas, ordered from highest to lowest priority. (optional)</param>
    /// <param name="wmoStationId">WMO station ID, typically five alphanumeric characters. You can supply multiple station IDs separated by commas, ordered from highest to lowest priority. (optional)</param>
    /// <param name="sourceId">Bright Sky source ID, as retrieved from the [&#x60;/sources&#x60; endpoint](/operations/getSources). You can supply multiple source IDs separated by commas, ordered from highest to lowest priority. (optional)</param>
    /// <param name="maxDist">Maximum distance of record location from the location given by &#x60;lat&#x60; and &#x60;lon&#x60;, in meters. Only has an effect when using &#x60;lat&#x60; and &#x60;lon&#x60;. (optional, default to 50000)</param>
    /// <param name="tz">Timezone in which record timestamps will be presented, as &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;tz database name&lt;/a&gt;. Will also be used as timezone when parsing &#x60;date&#x60; and &#x60;last_date&#x60;, unless these have explicit UTC offsets. If omitted but &#x60;date&#x60; has an explicit UTC offset, that offset will be used as timezone. Otherwise will default to UTC. (optional)</param>
    /// <param name="units">Physical units in which meteorological parameters will be returned. Set to &#x60;si&#x60; to use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/International_System_of_Units\&quot;&gt;SI units&lt;/a&gt; (except for precipitation, which is always measured in millimeters). The default &#x60;dwd&#x60; option uses a set of units that is more common in meteorological applications and civil use: &lt;table&gt;   &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;DWD&lt;/td&gt;&lt;td&gt;SI&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Cloud cover&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Dew point&lt;/td&gt;&lt;td&gt;°C&lt;/td&gt;&lt;td&gt;K&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Precipitation&lt;/td&gt;&lt;td&gt;mm&lt;/td&gt;&lt;td&gt;&lt;s&gt;kg / m²&lt;/s&gt; &lt;strong&gt;mm&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Precipitation probability&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Pressure&lt;/td&gt;&lt;td&gt;hPa&lt;/td&gt;&lt;td&gt;Pa&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Relative humidity&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;%&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Solar irradiation&lt;/td&gt;&lt;td&gt;kWh / m²&lt;/td&gt;&lt;td&gt;J / m²&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Sunshine&lt;/td&gt;&lt;td&gt;min&lt;/td&gt;&lt;td&gt;s&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Temperature&lt;/td&gt;&lt;td&gt;°C&lt;/td&gt;&lt;td&gt;K&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Visibility&lt;/td&gt;&lt;td&gt;m&lt;/td&gt;&lt;td&gt;m&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Wind (gust) direction&lt;/td&gt;&lt;td&gt;°&lt;/td&gt;&lt;td&gt;°&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;Wind (gust) speed&lt;/td&gt;&lt;td&gt;km / h&lt;/td&gt;&lt;td&gt;m / s&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;  (optional, default to dwd)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetWeather200Response</returns>

    //Make text better readable and convert syntax-charref to valid html content
    Task<GenericResult> GetWeather(DateTime date, DateTime? lastDate = default(DateTime?), decimal? lat = default(decimal?), decimal? lon = default(decimal?), List<string> dwdStationId = default(List<string>), List<string> wmoStationId = default(List<string>), List<int> sourceId = default(List<int>), int? maxDist = default(int?), string tz = default(string), string units = default(string));
}
