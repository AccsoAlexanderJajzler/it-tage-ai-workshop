/*
 * Bright Sky
 *
 *  Bright Sky is a free and open-source weather API. It aims to provide an easy-to-use gateway to weather data that the [DWD](https://www.dwd.de/) – Germany's meteorological service – publishes on their [open data server](https://opendata.dwd.de/).  The public instance at `https://api.brightsky.dev/` is free-to-use for all purposes, **no API key required**! Please note that the [DWD's Terms of Use](https://www.dwd.de/EN/service/copyright/copyright_artikel.html) apply to all data you retrieve through the API.  > This documentation is generated from an OpenAPI specification. The current version is available from https://brightsky.dev/brightsky.yml.   ## Quickstart  * Check out [`/current_weather`](operations/getCurrentWeather) if you want to know what the weather's like _right now_. * Check out [`/weather`](operations/getWeather) for hourly weather observations and forecasts. * Check out [`/radar`](operations/getRadar) if you're looking for a high-resolution rain radar. * Check out [`/alerts`](operations/getAlerts) if you're interested in weather alerts.  ... or keep reading below for some background information.   ## Good to Know  * **Geographical coverage**: due to its nature as German meteorological service, the observations published by the DWD have a strong focus on Germany. The _forecasts_ cover the whole world, albeit at a much lower density outside of Germany. * **Historical coverage**: Bright Sky serves historical data going back to January 1st, 2010. If you need data that goes further back, check out our [infrastructure repository](https://github.com/jdemaeyer/brightsky-infrastructure) to easily set up your own instance of Bright Sky! * **Source IDs**: Bright Sky's _source IDs_ are a technical artifact and – unlike the [DWD station IDs](https://www.dwd.de/DE/leistungen/klimadatendeutschland/stationsliste.html) and [WMO station IDs](https://opendata.dwd.de/climate_environment/CDC/help/stations_list_CLIMAT_data.txt) – have no meaning in the real world. When making requests to Bright Sky, try to avoid them and supply lat/lon or station IDs instead.   ## Useful Links  * [Bright Sky source code and issue tracking](https://github.com/jdemaeyer/brightsky/) * [Bright Sky infrastructure configuration](https://github.com/jdemaeyer/brightsky-infrastructure/) * [DWD Open Data landing page](https://www.dwd.de/EN/ourservices/opendata/opendata.html) * [Additional explanation files for DWD Open Data](https://www.dwd.de/DE/leistungen/opendata/hilfe.html?nn=495490&lsbId=627548), including:     * [List of main observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/ha_messnetz.xls?__blob=publicationFile&v=1)     * [List of additional observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/na_messnetz.xlsx?__blob=publicationFile&v=10)     * [List of MOSMIX stations](https://www.dwd.de/DE/leistungen/met_verfahren_mosmix/mosmix_stationskatalog.cfg?view=nasPublication&nn=495490)     * [List of meteorological parameters](https://www.dwd.de/DE/leistungen/opendata/help/schluessel_datenformate/kml/mosmix_elemente_pdf.pdf?__blob=publicationFile&v=2) * [DWD Open Data FAQ (German)](https://www.dwd.de/DE/leistungen/opendata/faqs_opendata.html) * [DWD Copyright information](https://www.dwd.de/EN/service/copyright/copyright_artikel.html)   ## Data Sources  All data available through Bright Sky is taken or derived from data on the [DWD open data server](https://opendata.dwd.de/):  * **Current weather / SYNOP**:   * https://opendata.dwd.de/weather/weather_reports/synoptic/germany/json/ * **Hourly weather**:   * Historical: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/   * Current day: https://opendata.dwd.de/weather/weather_reports/poi/   * Forecasts: https://opendata.dwd.de/weather/local_forecasts/mos/ * **Radar**:   * https://opendata.dwd.de/weather/radar/composite/rv/ * **Alerts**:   * https://opendata.dwd.de/weather/alerts/cap/COMMUNEUNION_DWD_STAT/ 
 *
 * The version of the OpenAPI document: 2.1.9
 * Contact: jakob@brightsky.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Service.DWD.Model
{
    /// <summary>
    /// Source
    /// </summary>
    [DataContract(Name = "Source")]
    public partial class Source : IEquatable<Source>, IValidatableObject
    {
        /// <summary>
        /// Source type
        /// </summary>
        /// <value>Source type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObservationTypeEnum
        {
            /// <summary>
            /// Enum Forecast for value: forecast
            /// </summary>
            [EnumMember(Value = "forecast")]
            Forecast = 1,

            /// <summary>
            /// Enum Synop for value: synop
            /// </summary>
            [EnumMember(Value = "synop")]
            Synop = 2,

            /// <summary>
            /// Enum Current for value: current
            /// </summary>
            [EnumMember(Value = "current")]
            Current = 3,

            /// <summary>
            /// Enum Historical for value: historical
            /// </summary>
            [EnumMember(Value = "historical")]
            Historical = 4

        }


        /// <summary>
        /// Source type
        /// </summary>
        /// <value>Source type</value>
        [DataMember(Name = "observation_type", EmitDefaultValue = false)]
        public ObservationTypeEnum? ObservationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Source" /> class.
        /// </summary>
        /// <param name="id">Bright Sky source ID.</param>
        /// <param name="dwdStationId">DWD weather station ID.</param>
        /// <param name="wmoStationId">WMO weather station ID.</param>
        /// <param name="stationName">DWD weather station name.</param>
        /// <param name="observationType">Source type.</param>
        /// <param name="firstRecord">Timestamp of first available record for this source.</param>
        /// <param name="lastRecord">Timestamp of latest available record for this source.</param>
        /// <param name="lat">Station latitude, in decimal degrees.</param>
        /// <param name="lon">Station longitude, in decimal degrees.</param>
        /// <param name="height">Station height, in meters.</param>
        /// <param name="distance">Distance of weather station to the requested &#x60;lat&#x60; and &#x60;lon&#x60;, in meters.</param>
        public Source(int id = default(int), string dwdStationId = default(string), string wmoStationId = default(string), string stationName = default(string), ObservationTypeEnum? observationType = default(ObservationTypeEnum?), DateTime firstRecord = default(DateTime), DateTime lastRecord = default(DateTime), decimal lat = default(decimal), decimal lon = default(decimal), decimal height = default(decimal), decimal distance = default(decimal))
        {
            Id = id;
            DwdStationId = dwdStationId;
            WmoStationId = wmoStationId;
            StationName = stationName;
            ObservationType = observationType;
            FirstRecord = firstRecord;
            LastRecord = lastRecord;
            Lat = lat;
            Lon = lon;
            Height = height;
            Distance = distance;
        }

        /// <summary>
        /// Bright Sky source ID
        /// </summary>
        /// <value>Bright Sky source ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// DWD weather station ID
        /// </summary>
        /// <value>DWD weather station ID</value>
        [DataMember(Name = "dwd_station_id", EmitDefaultValue = true)]
        public string DwdStationId { get; set; }

        /// <summary>
        /// WMO weather station ID
        /// </summary>
        /// <value>WMO weather station ID</value>
        [DataMember(Name = "wmo_station_id", EmitDefaultValue = true)]
        public string WmoStationId { get; set; }

        /// <summary>
        /// DWD weather station name
        /// </summary>
        /// <value>DWD weather station name</value>
        [DataMember(Name = "station_name", EmitDefaultValue = true)]
        public string StationName { get; set; }

        /// <summary>
        /// Timestamp of first available record for this source
        /// </summary>
        /// <value>Timestamp of first available record for this source</value>
        [DataMember(Name = "first_record", EmitDefaultValue = false)]
        public DateTime FirstRecord { get; set; }

        /// <summary>
        /// Timestamp of latest available record for this source
        /// </summary>
        /// <value>Timestamp of latest available record for this source</value>
        [DataMember(Name = "last_record", EmitDefaultValue = false)]
        public DateTime LastRecord { get; set; }

        /// <summary>
        /// Station latitude, in decimal degrees
        /// </summary>
        /// <value>Station latitude, in decimal degrees</value>
        [DataMember(Name = "lat", EmitDefaultValue = false)]
        public decimal Lat { get; set; }

        /// <summary>
        /// Station longitude, in decimal degrees
        /// </summary>
        /// <value>Station longitude, in decimal degrees</value>
        [DataMember(Name = "lon", EmitDefaultValue = false)]
        public decimal Lon { get; set; }

        /// <summary>
        /// Station height, in meters
        /// </summary>
        /// <value>Station height, in meters</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public decimal Height { get; set; }

        /// <summary>
        /// Distance of weather station to the requested &#x60;lat&#x60; and &#x60;lon&#x60;, in meters
        /// </summary>
        /// <value>Distance of weather station to the requested &#x60;lat&#x60; and &#x60;lon&#x60;, in meters</value>
        [DataMember(Name = "distance", EmitDefaultValue = false)]
        public decimal Distance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Source {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DwdStationId: ").Append(DwdStationId).Append("\n");
            sb.Append("  WmoStationId: ").Append(WmoStationId).Append("\n");
            sb.Append("  StationName: ").Append(StationName).Append("\n");
            sb.Append("  ObservationType: ").Append(ObservationType).Append("\n");
            sb.Append("  FirstRecord: ").Append(FirstRecord).Append("\n");
            sb.Append("  LastRecord: ").Append(LastRecord).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Source);
        }

        /// <summary>
        /// Returns true if Source instances are equal
        /// </summary>
        /// <param name="input">Instance of Source to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Source? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) && 
                (
                    DwdStationId == input.DwdStationId ||
                    (DwdStationId != null &&
                    DwdStationId.Equals(input.DwdStationId))
                ) && 
                (
                    WmoStationId == input.WmoStationId ||
                    (WmoStationId != null &&
                    WmoStationId.Equals(input.WmoStationId))
                ) && 
                (
                    StationName == input.StationName ||
                    (StationName != null &&
                    StationName.Equals(input.StationName))
                ) && 
                (
                    ObservationType == input.ObservationType ||
                    ObservationType.Equals(input.ObservationType)
                ) && 
                (
                    FirstRecord == input.FirstRecord ||
                    (FirstRecord != null &&
                    FirstRecord.Equals(input.FirstRecord))
                ) && 
                (
                    LastRecord == input.LastRecord ||
                    (LastRecord != null &&
                    LastRecord.Equals(input.LastRecord))
                ) && 
                (
                    Lat == input.Lat ||
                    Lat.Equals(input.Lat)
                ) && 
                (
                    Lon == input.Lon ||
                    Lon.Equals(input.Lon)
                ) && 
                (
                    Height == input.Height ||
                    Height.Equals(input.Height)
                ) && 
                (
                    Distance == input.Distance ||
                    Distance.Equals(input.Distance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Id.GetHashCode();
                if (DwdStationId != null)
                {
                    hashCode = (hashCode * 59) + DwdStationId.GetHashCode();
                }
                if (WmoStationId != null)
                {
                    hashCode = (hashCode * 59) + WmoStationId.GetHashCode();
                }
                if (StationName != null)
                {
                    hashCode = (hashCode * 59) + StationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + ObservationType.GetHashCode();
                if (FirstRecord != null)
                {
                    hashCode = (hashCode * 59) + FirstRecord.GetHashCode();
                }
                if (LastRecord != null)
                {
                    hashCode = (hashCode * 59) + LastRecord.GetHashCode();
                }
                hashCode = (hashCode * 59) + Lat.GetHashCode();
                hashCode = (hashCode * 59) + Lon.GetHashCode();
                hashCode = (hashCode * 59) + Height.GetHashCode();
                hashCode = (hashCode * 59) + Distance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
