/*
 * Bright Sky
 *
 *  Bright Sky is a free and open-source weather API. It aims to provide an easy-to-use gateway to weather data that the [DWD](https://www.dwd.de/) – Germany's meteorological service – publishes on their [open data server](https://opendata.dwd.de/).  The public instance at `https://api.brightsky.dev/` is free-to-use for all purposes, **no API key required**! Please note that the [DWD's Terms of Use](https://www.dwd.de/EN/service/copyright/copyright_artikel.html) apply to all data you retrieve through the API.  > This documentation is generated from an OpenAPI specification. The current version is available from https://brightsky.dev/brightsky.yml.   ## Quickstart  * Check out [`/current_weather`](operations/getCurrentWeather) if you want to know what the weather's like _right now_. * Check out [`/weather`](operations/getWeather) for hourly weather observations and forecasts. * Check out [`/radar`](operations/getRadar) if you're looking for a high-resolution rain radar. * Check out [`/alerts`](operations/getAlerts) if you're interested in weather alerts.  ... or keep reading below for some background information.   ## Good to Know  * **Geographical coverage**: due to its nature as German meteorological service, the observations published by the DWD have a strong focus on Germany. The _forecasts_ cover the whole world, albeit at a much lower density outside of Germany. * **Historical coverage**: Bright Sky serves historical data going back to January 1st, 2010. If you need data that goes further back, check out our [infrastructure repository](https://github.com/jdemaeyer/brightsky-infrastructure) to easily set up your own instance of Bright Sky! * **Source IDs**: Bright Sky's _source IDs_ are a technical artifact and – unlike the [DWD station IDs](https://www.dwd.de/DE/leistungen/klimadatendeutschland/stationsliste.html) and [WMO station IDs](https://opendata.dwd.de/climate_environment/CDC/help/stations_list_CLIMAT_data.txt) – have no meaning in the real world. When making requests to Bright Sky, try to avoid them and supply lat/lon or station IDs instead.   ## Useful Links  * [Bright Sky source code and issue tracking](https://github.com/jdemaeyer/brightsky/) * [Bright Sky infrastructure configuration](https://github.com/jdemaeyer/brightsky-infrastructure/) * [DWD Open Data landing page](https://www.dwd.de/EN/ourservices/opendata/opendata.html) * [Additional explanation files for DWD Open Data](https://www.dwd.de/DE/leistungen/opendata/hilfe.html?nn=495490&lsbId=627548), including:     * [List of main observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/ha_messnetz.xls?__blob=publicationFile&v=1)     * [List of additional observation stations](https://www.dwd.de/DE/leistungen/opendata/help/stationen/na_messnetz.xlsx?__blob=publicationFile&v=10)     * [List of MOSMIX stations](https://www.dwd.de/DE/leistungen/met_verfahren_mosmix/mosmix_stationskatalog.cfg?view=nasPublication&nn=495490)     * [List of meteorological parameters](https://www.dwd.de/DE/leistungen/opendata/help/schluessel_datenformate/kml/mosmix_elemente_pdf.pdf?__blob=publicationFile&v=2) * [DWD Open Data FAQ (German)](https://www.dwd.de/DE/leistungen/opendata/faqs_opendata.html) * [DWD Copyright information](https://www.dwd.de/EN/service/copyright/copyright_artikel.html)   ## Data Sources  All data available through Bright Sky is taken or derived from data on the [DWD open data server](https://opendata.dwd.de/):  * **Current weather / SYNOP**:   * https://opendata.dwd.de/weather/weather_reports/synoptic/germany/json/ * **Hourly weather**:   * Historical: https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/   * Current day: https://opendata.dwd.de/weather/weather_reports/poi/   * Forecasts: https://opendata.dwd.de/weather/local_forecasts/mos/ * **Radar**:   * https://opendata.dwd.de/weather/radar/composite/rv/ * **Alerts**:   * https://opendata.dwd.de/weather/alerts/cap/COMMUNEUNION_DWD_STAT/ 
 *
 * The version of the OpenAPI document: 2.1.9
 * Contact: jakob@brightsky.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Service.DWD.Model
{
    /// <summary>
    /// WeatherRecord
    /// </summary>
    [DataContract(Name = "WeatherRecord")]
    public partial class WeatherRecord : IEquatable<WeatherRecord>, IValidatableObject
    {
        /// <summary>
        /// Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. 
        /// </summary>
        /// <value>Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionEnum
        {
            /// <summary>
            /// Enum Dry for value: dry
            /// </summary>
            [EnumMember(Value = "dry")]
            Dry = 1,

            /// <summary>
            /// Enum Fog for value: fog
            /// </summary>
            [EnumMember(Value = "fog")]
            Fog = 2,

            /// <summary>
            /// Enum Rain for value: rain
            /// </summary>
            [EnumMember(Value = "rain")]
            Rain = 3,

            /// <summary>
            /// Enum Sleet for value: sleet
            /// </summary>
            [EnumMember(Value = "sleet")]
            Sleet = 4,

            /// <summary>
            /// Enum Snow for value: snow
            /// </summary>
            [EnumMember(Value = "snow")]
            Snow = 5,

            /// <summary>
            /// Enum Hail for value: hail
            /// </summary>
            [EnumMember(Value = "hail")]
            Hail = 6,

            /// <summary>
            /// Enum Thunderstorm for value: thunderstorm
            /// </summary>
            [EnumMember(Value = "thunderstorm")]
            Thunderstorm = 7,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 8

        }


        /// <summary>
        /// Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. 
        /// </summary>
        /// <value>Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. </value>
        [DataMember(Name = "condition", EmitDefaultValue = true)]
        public ConditionEnum? Condition { get; set; }
        /// <summary>
        /// Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. 
        /// </summary>
        /// <value>Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IconEnum
        {
            /// <summary>
            /// Enum ClearDay for value: clear-day
            /// </summary>
            [EnumMember(Value = "clear-day")]
            ClearDay = 1,

            /// <summary>
            /// Enum ClearNight for value: clear-night
            /// </summary>
            [EnumMember(Value = "clear-night")]
            ClearNight = 2,

            /// <summary>
            /// Enum PartlyCloudyDay for value: partly-cloudy-day
            /// </summary>
            [EnumMember(Value = "partly-cloudy-day")]
            PartlyCloudyDay = 3,

            /// <summary>
            /// Enum PartlyCloudyNight for value: partly-cloudy-night
            /// </summary>
            [EnumMember(Value = "partly-cloudy-night")]
            PartlyCloudyNight = 4,

            /// <summary>
            /// Enum Cloudy for value: cloudy
            /// </summary>
            [EnumMember(Value = "cloudy")]
            Cloudy = 5,

            /// <summary>
            /// Enum Fog for value: fog
            /// </summary>
            [EnumMember(Value = "fog")]
            Fog = 6,

            /// <summary>
            /// Enum Wind for value: wind
            /// </summary>
            [EnumMember(Value = "wind")]
            Wind = 7,

            /// <summary>
            /// Enum Rain for value: rain
            /// </summary>
            [EnumMember(Value = "rain")]
            Rain = 8,

            /// <summary>
            /// Enum Sleet for value: sleet
            /// </summary>
            [EnumMember(Value = "sleet")]
            Sleet = 9,

            /// <summary>
            /// Enum Snow for value: snow
            /// </summary>
            [EnumMember(Value = "snow")]
            Snow = 10,

            /// <summary>
            /// Enum Hail for value: hail
            /// </summary>
            [EnumMember(Value = "hail")]
            Hail = 11,

            /// <summary>
            /// Enum Thunderstorm for value: thunderstorm
            /// </summary>
            [EnumMember(Value = "thunderstorm")]
            Thunderstorm = 12,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 13

        }


        /// <summary>
        /// Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. 
        /// </summary>
        /// <value>Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. </value>
        [DataMember(Name = "icon", EmitDefaultValue = true)]
        public IconEnum? Icon { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherRecord" /> class.
        /// </summary>
        /// <param name="timestamp">ISO 8601-formatted timestamp of this weather record.</param>
        /// <param name="sourceId">Main Bright Sky source ID for this record.</param>
        /// <param name="cloudCover">Total cloud cover at timestamp.</param>
        /// <param name="condition">Current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. .</param>
        /// <param name="dewPoint">Dew point at timestamp, 2 m above ground.</param>
        /// <param name="icon">Icon alias suitable for the current weather conditions. Unlike the numerical parameters, this field is not taken as-is from the raw data (because it does not exist), but is calculated from different fields in the raw data as a best effort. Not all values are available for all source types. .</param>
        /// <param name="precipitation">Total precipitation during previous 60 minutes.</param>
        /// <param name="precipitationProbability">Probability of more than 0.1 mm of precipitation in the previous hour (only available in forecasts).</param>
        /// <param name="precipitationProbability6h">Probability of more than 0.2 mm of precipitation in the previous 6 hours (only available in forecasts at 0:00, 6:00, 12:00, and 18:00 UTC).</param>
        /// <param name="pressureMsl">Atmospheric pressure at timestamp, reduced to mean sea level.</param>
        /// <param name="relativeHumidity">Relative humidity at timestamp.</param>
        /// <param name="solar">Solar irradiation during previous 60 minutes.</param>
        /// <param name="sunshine">Sunshine duration during previous 60 minutes.</param>
        /// <param name="temperature">Air temperature at timestamp, 2 m above the ground.</param>
        /// <param name="visibility">Visibility at timestamp.</param>
        /// <param name="windDirection">Mean wind direction during previous hour, 10 m above the ground.</param>
        /// <param name="windSpeed">Mean wind speed during previous hour, 10 m above the ground.</param>
        /// <param name="windGustDirection">Direction of maximum wind gust during previous hour, 10 m above the ground.</param>
        /// <param name="windGustSpeed">Speed of maximum wind gust during previous hour, 10 m above the ground.</param>
        /// <param name="fallbackSourceIds">Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source.</param>
        public WeatherRecord(DateTime timestamp = default(DateTime), int sourceId = default(int), decimal? cloudCover = default(decimal?), ConditionEnum? condition = default(ConditionEnum?), decimal? dewPoint = default(decimal?), IconEnum? icon = default(IconEnum?), decimal? precipitation = default(decimal?), int? precipitationProbability = default(int?), int? precipitationProbability6h = default(int?), decimal? pressureMsl = default(decimal?), decimal? relativeHumidity = default(decimal?), decimal? solar = default(decimal?), decimal? sunshine = default(decimal?), decimal? temperature = default(decimal?), decimal? visibility = default(decimal?), decimal? windDirection = default(decimal?), decimal? windSpeed = default(decimal?), decimal? windGustDirection = default(decimal?), decimal? windGustSpeed = default(decimal?), Object fallbackSourceIds = default(Object))
        {
            Timestamp = timestamp;
            SourceId = sourceId;
            CloudCover = cloudCover;
            Condition = condition;
            DewPoint = dewPoint;
            Icon = icon;
            Precipitation = precipitation;
            PrecipitationProbability = precipitationProbability;
            PrecipitationProbability6h = precipitationProbability6h;
            PressureMsl = pressureMsl;
            RelativeHumidity = relativeHumidity;
            Solar = solar;
            Sunshine = sunshine;
            Temperature = temperature;
            Visibility = visibility;
            WindDirection = windDirection;
            WindSpeed = windSpeed;
            WindGustDirection = windGustDirection;
            WindGustSpeed = windGustSpeed;
            FallbackSourceIds = fallbackSourceIds;
        }

        /// <summary>
        /// ISO 8601-formatted timestamp of this weather record
        /// </summary>
        /// <value>ISO 8601-formatted timestamp of this weather record</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Main Bright Sky source ID for this record
        /// </summary>
        /// <value>Main Bright Sky source ID for this record</value>
        [DataMember(Name = "source_id", EmitDefaultValue = false)]
        public int SourceId { get; set; }

        /// <summary>
        /// Total cloud cover at timestamp
        /// </summary>
        /// <value>Total cloud cover at timestamp</value>
        [DataMember(Name = "cloud_cover", EmitDefaultValue = true)]
        public decimal? CloudCover { get; set; }

        /// <summary>
        /// Dew point at timestamp, 2 m above ground
        /// </summary>
        /// <value>Dew point at timestamp, 2 m above ground</value>
        [DataMember(Name = "dew_point", EmitDefaultValue = true)]
        public decimal? DewPoint { get; set; }

        /// <summary>
        /// Total precipitation during previous 60 minutes
        /// </summary>
        /// <value>Total precipitation during previous 60 minutes</value>
        [DataMember(Name = "precipitation", EmitDefaultValue = true)]
        public decimal? Precipitation { get; set; }

        /// <summary>
        /// Probability of more than 0.1 mm of precipitation in the previous hour (only available in forecasts)
        /// </summary>
        /// <value>Probability of more than 0.1 mm of precipitation in the previous hour (only available in forecasts)</value>
        [DataMember(Name = "precipitation_probability", EmitDefaultValue = true)]
        public int? PrecipitationProbability { get; set; }

        /// <summary>
        /// Probability of more than 0.2 mm of precipitation in the previous 6 hours (only available in forecasts at 0:00, 6:00, 12:00, and 18:00 UTC)
        /// </summary>
        /// <value>Probability of more than 0.2 mm of precipitation in the previous 6 hours (only available in forecasts at 0:00, 6:00, 12:00, and 18:00 UTC)</value>
        [DataMember(Name = "precipitation_probability_6h", EmitDefaultValue = true)]
        public int? PrecipitationProbability6h { get; set; }

        /// <summary>
        /// Atmospheric pressure at timestamp, reduced to mean sea level
        /// </summary>
        /// <value>Atmospheric pressure at timestamp, reduced to mean sea level</value>
        [DataMember(Name = "pressure_msl", EmitDefaultValue = true)]
        public decimal? PressureMsl { get; set; }

        /// <summary>
        /// Relative humidity at timestamp
        /// </summary>
        /// <value>Relative humidity at timestamp</value>
        [DataMember(Name = "relative_humidity", EmitDefaultValue = true)]
        public decimal? RelativeHumidity { get; set; }

        /// <summary>
        /// Solar irradiation during previous 60 minutes
        /// </summary>
        /// <value>Solar irradiation during previous 60 minutes</value>
        [DataMember(Name = "solar", EmitDefaultValue = true)]
        public decimal? Solar { get; set; }

        /// <summary>
        /// Sunshine duration during previous 60 minutes
        /// </summary>
        /// <value>Sunshine duration during previous 60 minutes</value>
        [DataMember(Name = "sunshine", EmitDefaultValue = true)]
        public decimal? Sunshine { get; set; }

        /// <summary>
        /// Air temperature at timestamp, 2 m above the ground
        /// </summary>
        /// <value>Air temperature at timestamp, 2 m above the ground</value>
        [DataMember(Name = "temperature", EmitDefaultValue = true)]
        public decimal? Temperature { get; set; }

        /// <summary>
        /// Visibility at timestamp
        /// </summary>
        /// <value>Visibility at timestamp</value>
        [DataMember(Name = "visibility", EmitDefaultValue = true)]
        public decimal? Visibility { get; set; }

        /// <summary>
        /// Mean wind direction during previous hour, 10 m above the ground
        /// </summary>
        /// <value>Mean wind direction during previous hour, 10 m above the ground</value>
        [DataMember(Name = "wind_direction", EmitDefaultValue = true)]
        public decimal? WindDirection { get; set; }

        /// <summary>
        /// Mean wind speed during previous hour, 10 m above the ground
        /// </summary>
        /// <value>Mean wind speed during previous hour, 10 m above the ground</value>
        [DataMember(Name = "wind_speed", EmitDefaultValue = true)]
        public decimal? WindSpeed { get; set; }

        /// <summary>
        /// Direction of maximum wind gust during previous hour, 10 m above the ground
        /// </summary>
        /// <value>Direction of maximum wind gust during previous hour, 10 m above the ground</value>
        [DataMember(Name = "wind_gust_direction", EmitDefaultValue = true)]
        public decimal? WindGustDirection { get; set; }

        /// <summary>
        /// Speed of maximum wind gust during previous hour, 10 m above the ground
        /// </summary>
        /// <value>Speed of maximum wind gust during previous hour, 10 m above the ground</value>
        [DataMember(Name = "wind_gust_speed", EmitDefaultValue = true)]
        public decimal? WindGustSpeed { get; set; }

        /// <summary>
        /// Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source
        /// </summary>
        /// <value>Object mapping meteorological parameters to the source IDs of alternative sources that were used to fill up missing values in the main source</value>
        [DataMember(Name = "fallback_source_ids", EmitDefaultValue = false)]
        public Object FallbackSourceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeatherRecord {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  CloudCover: ").Append(CloudCover).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  DewPoint: ").Append(DewPoint).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Precipitation: ").Append(Precipitation).Append("\n");
            sb.Append("  PrecipitationProbability: ").Append(PrecipitationProbability).Append("\n");
            sb.Append("  PrecipitationProbability6h: ").Append(PrecipitationProbability6h).Append("\n");
            sb.Append("  PressureMsl: ").Append(PressureMsl).Append("\n");
            sb.Append("  RelativeHumidity: ").Append(RelativeHumidity).Append("\n");
            sb.Append("  Solar: ").Append(Solar).Append("\n");
            sb.Append("  Sunshine: ").Append(Sunshine).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  WindDirection: ").Append(WindDirection).Append("\n");
            sb.Append("  WindSpeed: ").Append(WindSpeed).Append("\n");
            sb.Append("  WindGustDirection: ").Append(WindGustDirection).Append("\n");
            sb.Append("  WindGustSpeed: ").Append(WindGustSpeed).Append("\n");
            sb.Append("  FallbackSourceIds: ").Append(FallbackSourceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as WeatherRecord);
        }

        /// <summary>
        /// Returns true if WeatherRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of WeatherRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WeatherRecord? input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Timestamp == input.Timestamp ||
                    (Timestamp != null &&
                    Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    SourceId == input.SourceId ||
                    SourceId.Equals(input.SourceId)
                ) && 
                (
                    CloudCover == input.CloudCover ||
                    (CloudCover != null &&
                    CloudCover.Equals(input.CloudCover))
                ) && 
                (
                    Condition == input.Condition ||
                    Condition.Equals(input.Condition)
                ) && 
                (
                    DewPoint == input.DewPoint ||
                    (DewPoint != null &&
                    DewPoint.Equals(input.DewPoint))
                ) && 
                (
                    Icon == input.Icon ||
                    Icon.Equals(input.Icon)
                ) && 
                (
                    Precipitation == input.Precipitation ||
                    (Precipitation != null &&
                    Precipitation.Equals(input.Precipitation))
                ) && 
                (
                    PrecipitationProbability == input.PrecipitationProbability ||
                    (PrecipitationProbability != null &&
                    PrecipitationProbability.Equals(input.PrecipitationProbability))
                ) && 
                (
                    PrecipitationProbability6h == input.PrecipitationProbability6h ||
                    (PrecipitationProbability6h != null &&
                    PrecipitationProbability6h.Equals(input.PrecipitationProbability6h))
                ) && 
                (
                    PressureMsl == input.PressureMsl ||
                    (PressureMsl != null &&
                    PressureMsl.Equals(input.PressureMsl))
                ) && 
                (
                    RelativeHumidity == input.RelativeHumidity ||
                    (RelativeHumidity != null &&
                    RelativeHumidity.Equals(input.RelativeHumidity))
                ) && 
                (
                    Solar == input.Solar ||
                    (Solar != null &&
                    Solar.Equals(input.Solar))
                ) && 
                (
                    Sunshine == input.Sunshine ||
                    (Sunshine != null &&
                    Sunshine.Equals(input.Sunshine))
                ) && 
                (
                    Temperature == input.Temperature ||
                    (Temperature != null &&
                    Temperature.Equals(input.Temperature))
                ) && 
                (
                    Visibility == input.Visibility ||
                    (Visibility != null &&
                    Visibility.Equals(input.Visibility))
                ) && 
                (
                    WindDirection == input.WindDirection ||
                    (WindDirection != null &&
                    WindDirection.Equals(input.WindDirection))
                ) && 
                (
                    WindSpeed == input.WindSpeed ||
                    (WindSpeed != null &&
                    WindSpeed.Equals(input.WindSpeed))
                ) && 
                (
                    WindGustDirection == input.WindGustDirection ||
                    (WindGustDirection != null &&
                    WindGustDirection.Equals(input.WindGustDirection))
                ) && 
                (
                    WindGustSpeed == input.WindGustSpeed ||
                    (WindGustSpeed != null &&
                    WindGustSpeed.Equals(input.WindGustSpeed))
                ) && 
                (
                    FallbackSourceIds == input.FallbackSourceIds ||
                    (FallbackSourceIds != null &&
                    FallbackSourceIds.Equals(input.FallbackSourceIds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Timestamp != null)
                {
                    hashCode = (hashCode * 59) + Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + SourceId.GetHashCode();
                if (CloudCover != null)
                {
                    hashCode = (hashCode * 59) + CloudCover.GetHashCode();
                }
                hashCode = (hashCode * 59) + Condition.GetHashCode();
                if (DewPoint != null)
                {
                    hashCode = (hashCode * 59) + DewPoint.GetHashCode();
                }
                hashCode = (hashCode * 59) + Icon.GetHashCode();
                if (Precipitation != null)
                {
                    hashCode = (hashCode * 59) + Precipitation.GetHashCode();
                }
                if (PrecipitationProbability != null)
                {
                    hashCode = (hashCode * 59) + PrecipitationProbability.GetHashCode();
                }
                if (PrecipitationProbability6h != null)
                {
                    hashCode = (hashCode * 59) + PrecipitationProbability6h.GetHashCode();
                }
                if (PressureMsl != null)
                {
                    hashCode = (hashCode * 59) + PressureMsl.GetHashCode();
                }
                if (RelativeHumidity != null)
                {
                    hashCode = (hashCode * 59) + RelativeHumidity.GetHashCode();
                }
                if (Solar != null)
                {
                    hashCode = (hashCode * 59) + Solar.GetHashCode();
                }
                if (Sunshine != null)
                {
                    hashCode = (hashCode * 59) + Sunshine.GetHashCode();
                }
                if (Temperature != null)
                {
                    hashCode = (hashCode * 59) + Temperature.GetHashCode();
                }
                if (Visibility != null)
                {
                    hashCode = (hashCode * 59) + Visibility.GetHashCode();
                }
                if (WindDirection != null)
                {
                    hashCode = (hashCode * 59) + WindDirection.GetHashCode();
                }
                if (WindSpeed != null)
                {
                    hashCode = (hashCode * 59) + WindSpeed.GetHashCode();
                }
                if (WindGustDirection != null)
                {
                    hashCode = (hashCode * 59) + WindGustDirection.GetHashCode();
                }
                if (WindGustSpeed != null)
                {
                    hashCode = (hashCode * 59) + WindGustSpeed.GetHashCode();
                }
                if (FallbackSourceIds != null)
                {
                    hashCode = (hashCode * 59) + FallbackSourceIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
